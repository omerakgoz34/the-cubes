package main

import (
    "encoding/json"
    "log"
    "net/http"
    "time"

    ws "github.com/gorilla/websocket"
)

func networkManager() {
    if mode == "host" {
        upgrader := ws.Upgrader{}
        http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
            c, err := upgrader.Upgrade(w, r, nil)
            if err != nil {
                log.Println("Server upgrade error: ", err)
                return
            }

            defer c.Close()

            go func() {
                for {
                    // Send Data
                    err = c.WriteJSON(PlayerOne)
                    if err != nil {
                        log.Println("Write: ", err)
                        return
                    }

                    time.Sleep(time.Millisecond * 16)
                }
            }()

            // time.Sleep(time.Millisecond * 16)

            for {
                // Recv Data
                _, recvMsg, err := c.ReadMessage()
                if err != nil {
                    log.Println("read:", err)
                    return
                }
                err = json.Unmarshal(recvMsg, &PlayerTwo)
                if err != nil {
                    log.Println("JSON Decoding Error: ", err)
                }

                connected = true
                time.Sleep(time.Millisecond * 16)
            }
        })

        go http.ListenAndServe(addr, nil)

    } else if mode == "peer" {
        c, _, err := ws.DefaultDialer.Dial(url.String(), nil)
        if err != nil {
            log.Fatal("dial error:", err)
        }

        go func() {
            defer c.Close()

            go func() {
                for {
                    // Recv Data
                    _, recvMsg, err := c.ReadMessage()
                    if err != nil {
                        log.Println("read:", err)
                        return
                    }
                    err = json.Unmarshal(recvMsg, &PlayerTwo)
                    if err != nil {
                        log.Println("JSON Decoding Error: ", err)
                    }

                    connected = true
                    time.Sleep(time.Millisecond * 15)
                }
            }()

            // time.Sleep(time.Millisecond * 16)

            for {
                // Send Data
                err = c.WriteJSON(PlayerOne)
                if err != nil {
                    log.Println("Write: ", err)
                    return
                }

                time.Sleep(time.Millisecond * 16)
            }
        }()
    }
}
